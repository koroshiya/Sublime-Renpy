{
   "scope": "source.renpy.python",
   "completions":
   [
      { "trigger": "_get_voice_info", "contents": "_get_voice_info()" },

      { "trigger": "image_exists", "contents": "image_exists(name='$0')" },

      { "trigger": "layout.yesno_screen", "contents": "layout.yesno_screen(message='$0', yes=None, no=None)" },

      { "trigger": "persistent", "contents": "persistent.${1:[variable]} = ${2:[value]}" },

      { "trigger": "renpy.add_layer", "contents": "renpy.add_layer(layer='$0', above=None, below=None, menu_clear=True)" },

      { "trigger": "renpy.call", "contents": "renpy.call(label='$0')" },
      { "trigger": "renpy.call_replay", "contents": "renpy.call_replay(label='$0', scope={})" },
      { "trigger": "renpy.call_screen", "contents": "renpy.call_screen(_screen_name='$0')" },
      { "trigger": "renpy.call_stack_depth", "contents": "renpy.call_stack_depth()" },
      { "trigger": "renpy.choice_for_skipping", "contents": "renpy.choice_for_skipping()" },
      { "trigger": "renpy.clear_game_runtime", "contents": "renpy.clear_game_runtime()" },
      { "trigger": "renpy.clear_keymap_cache", "contents": "renpy.clear_keymap_cache()" },
      { "trigger": "renpy.copy_images", "contents": "renpy.copy_images(old=$0, new=None)" },
      { "trigger": "renpy.context", "contents": "renpy.context()" },
      { "trigger": "renpy.context_dynamic", "contents": "renpy.context_dynamic()" },
      { "trigger": "renpy.context_nesting_level", "contents": "renpy.context_nesting_level()" },
      { "trigger": "renpy.count_dialogue_blocks", "contents": "renpy.count_dialogue_blocks()" },
      { "trigger": "renpy.count_seen_dialogue_blocks", "contents": "renpy.count_seen_dialogue_blocks()" },

      { "trigger": "renpy.define_screen", "contents": "renpy.define_screen('${1:[screenName]}', '${2:[displayFunction]}', modal='False', zorder='0', tag=None, variant=None)" },
      { "trigger": "renpy.diff_memory", "contents": "renpy.diff_memory(update=True)" },
      { "trigger": "renpy.display_menu", "contents": "renpy.display_menu(items=('${1:[option]}','${2:[returnValue]}'), interact=True, screen='choice')" },
      { "trigger": "renpy.dynamic", "contents": "renpy.dynamic()" },

      { "trigger": "renpy.end_replay", "contents": "renpy.end_replay()" },

      { "trigger": "renpy.focus_coordinates", "contents": "renpy.focus_coordinates()" },
      { "trigger": "renpy.force_autosave", "contents": "renpy.force_autosave(take_screenshot=False)" },
      { "trigger": "renpy.force_full_redraw", "contents": "renpy.force_full_redraw()" },
      { "trigger": "renpy.free_memory", "contents": "renpy.free_memory()" },
      { "trigger": "renpy.full_restart", "contents": "renpy.full_restart(transition=False, label='_invoke_main_menu', target='_main_menu')" },

      { "trigger": "renpy.get_at_list", "contents": "renpy.get_at_list(name='$0', layer='master')" },
      { "trigger": "renpy.get_autoreload", "contents": "renpy.get_autoreload()" },
      { "trigger": "renpy.get_image_bounds", "contents": "renpy.get_image_bounds(tag=$0, width=None, height=None, layer='master')" },
      { "trigger": "renpy.get_image_load_log", "contents": "renpy.get_image_load_log(age=None)" },
      { "trigger": "renpy.get_mouse_pos", "contents": "renpy.get_mouse_pos()" },
      { "trigger": "renpy.get_physical_size", "contents": "renpy.get_physical_size()" },
      { "trigger": "renpy.get_placement", "contents": "renpy.get_placement(d=$0)" },
      { "trigger": "renpy.get_refresh_rate", "contents": "renpy.get_refresh_rate(precision=${1:5})" },
      { "trigger": "renpy.get_renderer_info", "contents": "renpy.get_renderer_info()" },
      { "trigger": "renpy.get_say_attributes", "contents": "renpy.get_say_attributes()" },
      { "trigger": "renpy.get_screen", "contents": "renpy.get_screen(name='$0', layer='screens')" },
      { "trigger": "renpy.get_showing_tags", "contents": "renpy.get_placement(layer='master')" },
      { "trigger": "renpy.get_side_image", "contents": "renpy.get_side_image(prefix_tag='$0', image_tag=None, not_showing=True, layer='master')" },
      { "trigger": "renpy.get_transition", "contents": "renpy.get_transition(layer=None)" },
      { "trigger": "renpy.get_widget", "contents": "renpy.get_widget('${1:[screen]}', '${2:[id]}', layer='screens')" },
      { "trigger": "renpy.get_widget_properties", "contents": "renpy.get_widget_properties(id='$0', screen=None, layer='screens')" },

      { "trigger": "renpy.has_image", "contents": "renpy.has_image(name='$0', exact=False)" },
      { "trigger": "renpy.hide", "contents": "renpy.hide(name='$0', layer='master')" },
      { "trigger": "renpy.hide_screen", "contents": "renpy.hide_screen(tag='$0', layer='screens')" },

      { "trigger": "renpy.iconify", "contents": "renpy.iconify()" },
      { "trigger": "renpy.image", "contents": "renpy.image(name='$0', d='')" },
      { "trigger": "renpy.invoke_in_thread", "contents": "renpy.invoke_in_thread(fn=$0)" },
      { "trigger": "renpy.is_seen", "contents": "renpy.is_seen(ever=True)" },
      { "trigger": "renpy.is_start_interact", "contents": "renpy.is_start_interact()" },

      { "trigger": "renpy.jump", "contents": "renpy.jump(label='$0')" },

      { "trigger": "renpy.layer_at_list", "contents": "renpy.layer_at_list(at_list=[$0], layer='master')" },
      { "trigger": "renpy.load_module", "contents": "renpy.load_module(name='$0')" },
      { "trigger": "renpy.load_string", "contents": "renpy.load_string(s=$0, filename='<string>')" },

      { "trigger": "renpy.maximum_framerate", "contents": "renpy.maximum_framerate(t=$0)" },
      { "trigger": "renpy.movie_cutscene", "contents": "renpy.movie_cutscene(filename='$0', delay=None, loops=0, stop_music=True)" },
      { "trigger": "renpy.munge", "contents": "renpy.munge(name='$0', filename=None)" },
      { "trigger": "renpy.music.get_playing", "contents": "renpy.music.get_playing(channel='music')" },
      { "trigger": "renpy.music.is_playing", "contents": "renpy.music.is_playing(channel='music')" },
      { "trigger": "renpy.music.play", "contents": "renpy.music.play(filenames=$0, channel='music', loop=None, fadeout=None, synchro_start=False, fadein=0, tight=None, if_changed=False)" },
      { "trigger": "renpy.music.queue", "contents": "renpy.music.queue(filenames=$0, channel='music', loop=None, clear_queue=True, fadein=0, tight=None)" },
      { "trigger": "renpy.music.register_channel", "contents": "renpy.music.register_channel(name='$0', mixer=None, loop=None, stop_on_mute=True, tight=False, file_prefix='', file_suffix='', buffer_queue=True)" },
      { "trigger": "renpy.music.set_pan", "contents": "renpy.music.set_pan(pan=$0, delay=, channel='music')" },
      { "trigger": "renpy.music.set_queue_empty_callback", "contents": "renpy.music.set_queue_empty_callback(callback=$0, channel='music')" },
      { "trigger": "renpy.music.set_volume", "contents": "renpy.music.set_volume(volume=$0, delay=0, channel='music')" },
      { "trigger": "renpy.music.stop", "contents": "renpy.music.stop(channel='music', fadeout=None)" },

      { "trigger": "renpy.not_infinite_loop", "contents": "renpy.not_infinite_loop(delay=$0)" },
      { "trigger": "renpy.notify", "contents": "renpy.notify(message='$0')" },

      { "trigger": "renpy.pause", "contents": "renpy.pause(delay=None, music=None, with_none=None, hard=False, checkpoint=None)" },
      { "trigger": "renpy.pop_call", "contents": "renpy.pop_call()" },
      { "trigger": "renpy.predicting", "contents": "renpy.predicting()" },
      { "trigger": "renpy.profile_memory", "contents": "renpy.profile_memory(fraction=1.0, minimum=0)" },
      { "trigger": "renpy.profile_rollback", "contents": "renpy.profile_rollback()" },

      { "trigger": "renpy.queue_event", "contents": "renpy.queue_event(name='$0', up=False)" },
      { "trigger": "renpy.quit", "contents": "renpy.quit(relaunch=False, status=0)" },
      { "trigger": "renpy.quit_event", "contents": "renpy.quit_event()" },

      { "trigger": "renpy.random.random", "contents": "renpy.random.random()" },
      { "trigger": "renpy.random.randint", "contents": "renpy.random.randint(${1:[min]}, ${2:[max]})" },
      { "trigger": "renpy.random.choice", "contents": "renpy.random.choice(seq=[$0])" },
      { "trigger": "renpy.reload_script", "contents": "renpy.reload_script()" },
      { "trigger": "renpy.reset_physical_size", "contents": "renpy.reset_physical_size()" },
      { "trigger": "renpy.restart_interaction", "contents": "renpy.restart_interaction()" },
      { "trigger": "renpy.return_statement", "contents": "renpy.return_statement()" },
      { "trigger": "renpy.run", "contents": "renpy.run(action=$0)" },
      
      { "trigger": "renpy.say", "contents": "renpy.say('${1:[whoIsTalking]}', '${2:[whatIsSaid]}', interact=True)" },
      { "trigger": "renpy.scene", "contents": "renpy.scene(layer='master')" },
      { "trigger": "renpy.screenshot", "contents": "renpy.screenshot(filename='$0')" },
      { "trigger": "renpy.scry", "contents": "renpy.scry()" },
      { "trigger": "renpy.seen_audio", "contents": "renpy.seen_audio(filename='$0')" },
      { "trigger": "renpy.seen_image", "contents": "renpy.seen_image(name='$0')" },
      { "trigger": "renpy.set_autoreload", "contents": "renpy.set_autoreload(autoreload=$0)" },
      { "trigger": "renpy.set_mouse_pos", "contents": "renpy.set_mouse_pos(${1:[x]}, ${2:[y]}, duration=0)" },
      { "trigger": "renpy.set_physical_size", "contents": "renpy.set_physical_size(size=(${1:[x]}, ${2:[y]}))" },
      { "trigger": "renpy.show", "contents": "renpy.show(name='$0', at_list=[], layer='master', what=None, zorder=0, tag=None, behind=[])" },
      { "trigger": "renpy.show_layer_at", "contents": "renpy.show_layer_at(at_list=[$0], layer='master')" },
      { "trigger": "renpy.show_screen", "contents": "renpy.show_screen(_screen_name='$0')" },
      { "trigger": "renpy.showing", "contents": "renpy.showing(name='$0', layer='master')" },
      { "trigger": "renpy.shown_window", "contents": "renpy.shown_window()" },
      { "trigger": "renpy.split_properties", "contents": "renpy.split_properties(properties='$0')" },
      { "trigger": "renpy.start_predict", "contents": "renpy.start_predict(trans=$0, before=None, after=None)" },
      { "trigger": "renpy.start_predict_screen", "contents": "renpy.start_predict_screen(_screen_name='$0')" },
      { "trigger": "renpy.stop_predict", "contents": "renpy.stop_predict(trans=$0, before=None, after=None)" },
      { "trigger": "renpy.stop_predict_screen", "contents": "renpy.stop_predict_screen(name='$0')" },
      { "trigger": "renpy.substitute", "contents": "renpy.substitute(s='$0', scope=None, translate=True)" },
      
      { "trigger": "renpy.transition", "contents": "renpy.transition(trans=$0, layer=None, always=False)" },
      
      { "trigger": "renpy.variant", "contents": "renpy.variant(name='$0')" },
      { "trigger": "renpy.version", "contents": "renpy.version(tuple=False)" },
      { "trigger": "renpy.vibrate", "contents": "renpy.vibrate(duration=$0)" },

      { "trigger": "renpy.with_statement", "contents": "renpy.with_statement(trans=$0, always=false)" },

      { "trigger": "voice", "contents": "voice(filename='$0', tag=None)" },
      { "trigger": "voice_can_replay", "contents": "voice_can_replay()" },
      { "trigger": "voice_replay", "contents": "voice_replay()" },
      { "trigger": "voice_sustain", "contents": "voice_sustain(ignored='$0')" },

      { "trigger": "AlphaDissolve", "contents": "AlphaDissolve(control=$0, delay=0.0, alpha=False, reverse=False)" },
      { "trigger": "ComposeTransition", "contents": "ComposeTransition(trans=$0, before=None, after=None)" },
      { "trigger": "CropMove", "contents": "CropMove(time=$0, mode='slideright', startcrop=(0.0, 0.0, 0.0, 1.0), startpos=(0.0, 0.0), endcrop=(0.0, 0.0, 1.0, 1.0), endpos=(0.0, 0.0), topnew=True)" },
      { "trigger": "Dissolve", "contents": "Dissolve(time=$0, alpha=False, time_warp=None)" },
      { "trigger": "Fade", "contents": "Fade(out_time=$0, hold_time=, in_time=, color='#000')" },
      { "trigger": "ImageDissolve", "contents": "ImageDissolve(image=$0, time=, ramplen=8, reverse=False, alpha=True, time_warp=None" },
      { "trigger": "MoveTransition", "contents": "MoveTransition(delay=$0, enter=None, leave=None, old=False, layers=['master'], time_warp=None, enter_time_warp=None, leave_time_warp=None)" },
      { "trigger": "MultipleTransition", "contents": "MultipleTransition($0)" },
      { "trigger": "Pause", "contents": "Pause(delay=$0)" },
      { "trigger": "Pixellate", "contents": "Pixellate(time=$0, steps=)" },
      { "trigger": "PushMove", "contents": "PushMove(time=$0, mode='pushright')" },
   ]
}